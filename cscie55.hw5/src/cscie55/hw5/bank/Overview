/**                                                    -----------SUMMARY----------
*
*    This homework continues HW4 by placing a BankServer between the Bank and its users. The BankServer handles simultaneous requests from a set of users, 
*    and assigns each request to be executed by one thread. This sets the stage for building a distributed system in which the Bank users are on different 
*    machines from the Bank and BankServer.  This homework makes use of FindBugs, a static code tool 
*    for finding bugs in Java code. It also uses Unit Testing with JUnit, which is a self testing code that verifies required functionality of the Java code 
*    replacing the main(String[] args)method. This text gives a description of how i solved the homework #5 - including all assumptions made, additional 
*    fields and methods created and how to execute the solution. By walking through this text, anyone with little or no Java knowledge should be able to 
*    replicate the same result. 
*
*
*                                               -------REQUIREMENTS FOR THE HOMEWORK #4-----------
*
*    The BankImpl and AccountImpl classes "From HW4" should be copied into a new project and package for HW5 (cscie55.hw5.bank) and modified as described below:
* 
*       - Change the package to cscie55.hw5.bank.
*       - BankImpl has three transfer methods, which tried different locking strategies. Keep transferLockingAccount, but rename it to transfer, and delete the 
*         other two. Also, add a deposit(int accountId, long amount) method to process deposits to the given account.
*
*
*     --Implement the BankServer --
*
*     The BankServerImpl and all of the CommandExecutionThreads share the same Queue<Command> -- the command queue. The BankServerImpl's execute method adds a 
*     Command to the command queue.
*
*     Copy BankServer into your project and then define a class implementing it, named BankServerImpl. Your implementation should do the following:
*
*        - Manage a Queue<Command>: Commands will reside in this queue after being submitted by the execute method, until they are removed from the queue and 
*          executed by a CommandExecutionThread.
*        - Manage an array of CommandExecutionThreads. These threads do the actual work of the server, pulling Commands off the queue and executing them.
*        - Define a constructor that creates and starts the CommandExecutionThreads.
*        - Implement the execute method. This simply adds the given Command to the queue of commands.
*        - Implement the stop method. This should add a Stop command to the queue for each thread, and will cause each CommandExecutionThread to terminate. 
*          After doing this, call join() on each of these threads. Once all the join() calls complete, this method will return.
*        - Implement the totalBalances() method, by invoking Bank.totalBalances().
*
*
*     --Implement the CommandExecutionThread--
*
*     CommandExecutionThread should extend Thread, and so must provide a run() method. This run() method will wait for the command queue to be non-empty. 
*     When this occurs, one Command is removed from the queue and executed. After execution, the thread needs to go back to waiting for its next Command to 
*     arrive. In other words, the run() method should have a synchronized block that needs to sit in a loop waiting for the command queue to be non-empty. 
*     The waiting is implemented using the wait() method, applied to the command queue. When BankServerImpl calls notifyAll() on the command queue, the 
*     threads sitting inside wait() for the command queue wake up to check if the queue is non-empty.
*
*     If a non-empty queue is detected, then a Command is removed from the queue and executed. Note that the synchronized block ensures that if the command 
*     queue was observed to be empty, it stays empty until a Command can be removed, (as long as the loop and the removal are both inside the synchronized block).
* 
*     One special command is Stop. Execution of Stop does nothing. However, your run() method should return (terminating the thread) once it sees the Stop 
*     command. You can test whether a command is the Stop command by calling Command.isStop().
* 
*     run() should have a top-level loop that continues as long as Command.isStop() is false. Inside this loop is the wait loop followed by command execution.
*
*     You will need to write a constructor for CommandExecutionThread which should take three arguments:
*
*        - Bank bank: The Bank on which the commands execute. You will need to pass this Bank object to the Commands being executed.
*        - Queue<Command> commandQueue: This is the same command queue used by the BankServerImpl. It is crucial for the BankServerImpl and the 
*          CommandExecutionThreads to synchronize on this command queue. More on this below.
*        - boolean executeCommandInsideMonitor: This uses synchronization among threads accessing the command queue to guarantee correct operation by ensuring 
*          that no more than one thread updates the queue at a time.
*
*     
*     The CommandExecutionThread should be coded to execute the command in two different ways, inside and outside the synchronized block, under control of the 
*     executeCommandInsideMonitor flag, passed to the CommandExecutionThread constructor. An example is as shown below
*
*                  Command command;
*                  synchronized (commandQueue) {
*                     ...
*                     command = commandQueue.remove();
*                     if (executeCommandInsideMonitor) {
*                     command.execute(bank);
*                     }
*                   }
*                   if (!executeCommandInsideMonitor) {
*                       command.execute(bank);
*                   }
*     The provided test code will try execution both ways, and measure the impact on performance.  
*         
*
*                                                      --------CODE ORGANIZATION-----------
*
*    The combined code is structured as shown below:
*
*       src/
*           cscie55/
*                  hw5/
*                      bank/
*                         command/
*                              Command                   Provided
*                              CommandDeposit            Provided
*                              CommandStop               Provided
*                              CommandTransfer           Provided
*                          Account                       Provided
*                          AccountImpl                   From HW4
*                          Bank                          Provided
*                          BankException                 Provided
*                          BankImpl                      From HW4
*                          BankServer                    Provided
*                          BankServerImpl                To be written
*                          CommandExecutionThread        To be written
*                          DuplicateAccountException     Provided
*                          InsufficientFundsException    Provided
*                          Junit_Output_HW5.pdf          To be written
*                          hw5-discussion.txt            To be written
*                          hw5-output.txt                To be written
*                          Overview                      To be written
*          test/
*              cscie55/
*                  hw5/
*                      Tester                            Provided
* 
*
*	
*	                                           ------ASSUMPTIONS MADE IN THE DESIGN------
*	
*	 - It is assumed that the methods addAccount, totalBalances and numberOfAccounts do not require synchronization.
*
*
*	                                     -----------CLASSES, FIELDS AND METHODS CREATED-------------
*
*	 I created a threadCount field in BankServerImpl to help synchronize the BankServerImpl and the CommandExecutionThreads on the command queue. In a way it 
*    helps iterate through the command queue, calling a Command Stop object that signifies that a thread is done executing a command.
*                                               
*
*	                                        --------HOW TO EXECUTE THE PROGRAM---------
*    
*    I used the Eclipse IDE for coding, and It already knows how to run the JUnit tests. So all i did was download the test code and created a new run 
*    configuration then selecting JUnit4. A PDF of the JUnit output result runs are attached as part of my homework submission.
* 
*                                                  
*                                                 -----IMPORTANT NOTE BELOW------
*
*   This submission has been tested with 1 bug and no errors. FindBugs keeps flagging a bug when you start the thread in the constructor of the BankServerImpl 
*   class. I am not sure if it is a good practice to start a thread at the same time an object is being created. My research on that pointed to starting the 
*   thread outside the constructor, which works without that bug. There are other ways to start the thread without causing that bug. However, doing all those 
*   will go against the requirement of the assignment of creating and starting the thread in the constructor of BankServerImpl class. So, i have decide to leave
*   the bug as it is. All JUnit runs passed and the performance measurements output are submitted with the homework. 
*    
*
*/

